#!/usr/bin/ruby --disable-gems

module ShellSupportCLI
  ROOT = File.expand_path('../..', __FILE__)

  class << self
    def call(*argv)
      case argv.shift
      when 'env'
        usage_and_die unless (shellname = argv.shift)
        env(shellname)
      else
        usage_and_die
      end
    end

    private

    # write out (to STDOUT) a list of instructions using a simple API
    # implemented in each shell shim. This API consists of a small set of commands:
    #
    # shopify_cli__source <path>
    #   sources a script from the named path. literally just "source <path>".
    #
    # shopify_cli__append_path <path>
    #   append the named path to $PATH
    #
    # shopify_cli__prepend_path <path>
    #   prepend the named path to $PATH
    #
    # shopify_cli__setenv <k> <v>
    #   set the environment variable, e.g. export <k>=<v>
    #
    # shopify_cli__lazyload <command> <path>
    #   If <command> is not already defined, create a shell function which
    #   loads the actual implementation of the command from the named path.
    #   This is useful for rarely-used commands which must be provided, but
    #   take some time to load, and so should not be bothered with on shell
    #   startup. (e.g. nvm, and to a lesser degree, chruby)
    def env(_shellname)
      # EnvHelpers.source("sh/autocomplete/completion.#{shellname}")
      EnvHelpers.setenv('USING_SHOPIFY_CLI', '1')

      # Use Mac's default Android SDK location.
      unless ENV.key?('NVM_DIR')
        EnvHelpers.setenv('NVM_DIR', File.expand_path('~/.nvm'))
      end

      # EnvHelpers.lazyload('chruby', "'#{ROOT}/sh/chruby/chruby.sh'")
      # EnvHelpers.lazyload("nvm",    "'#{ROOT}/sh/nvm/nvm.sh' --no-use")

      EnvHelpers.prepend_path("#{ROOT}/bin/user")
    end

    def usage_and_die
      abort("usage: #{$PROGRAM_NAME} env <shellname>")
    end
  end

  module EnvHelpers
    class << self
      def setenv(k, v)
        puts %(shopify_cli__setenv "#{k}" "#{v}")
      end

      def source(rel_path)
        abs_path = File.expand_path(rel_path, ROOT)
        puts %(shopify_cli__source "#{abs_path}")
      end

      def append_path(path)
        puts %(shopify_cli__append_path "#{path}") unless ENV['PATH'].include?(path)
      end

      def prepend_path(path)
        puts %(shopify_cli__prepend_path "#{path}")
      end

      def lazyload(cmd, script)
        puts %(shopify_cli__lazyload "#{cmd}" "#{script}")
      end
    end
  end
end

ShellSupportCLI.call(*ARGV) if $PROGRAM_NAME == __FILE__
